// Array para armazenar as tarefas na mem√≥ria durante a execu√ß√£o
let tarefas = [];

// Seleciona elementos do HTML pelo ID para manipular depois
const form = document.getElementById('taskForm');          // Formul√°rio de cria√ß√£o de tarefa
const lista = document.getElementById('taskList');          // UL onde as tarefas ser√£o listadas
const themeBtn = document.getElementById('toggleTheme');    // Bot√£o para alternar tema claro/escuro
const exportBtn = document.getElementById('exportTasks');   // Bot√£o para exportar tarefas em arquivo
const importBtn = document.getElementById('importTasks');   // Bot√£o para abrir seletor de arquivo para importar
const importFile = document.getElementById('importFile');   // Input tipo file escondido para importar arquivo JSON

// Evento que escuta o clique no bot√£o de tema
themeBtn.addEventListener('click', () => {
    // Alterna a classe 'dark' no body, ativando/desativando o modo escuro via CSS
    document.body.classList.toggle('dark');
});

// Evento que escuta o envio do formul√°rio (quando o usu√°rio cria uma tarefa)
form.addEventListener('submit', e => {
    e.preventDefault(); // Evita que o formul√°rio recarregue a p√°gina (comportamento padr√£o)

    // Pega os valores dos campos do formul√°rio
    const titulo = document.getElementById('taskTitle').value;
    const data = document.getElementById('taskDate').value;
    const cor = document.getElementById('taskColor').value;

    // Cria um objeto tarefa com ID √∫nico (timestamp), dados do formul√°rio e status inicial (n√£o conclu√≠da)
    const nova = {
        id: Date.now(),
        titulo,
        dataEntrega: data,
        cor,
        concluida: false
    };

    // Adiciona a nova tarefa ao array tarefas
    tarefas.push(nova);

    // Reseta os campos do formul√°rio para vazio, preparando para nova entrada
    form.reset();

    // Atualiza a lista vis√≠vel chamando a fun√ß√£o de renderiza√ß√£o
    renderizar();
});

// Fun√ß√£o para renderizar (atualizar) a lista de tarefas na tela
function renderizar() {
    // Limpa o conte√∫do atual da lista para evitar duplica√ß√£o
    lista.innerHTML = '';

    // Percorre todas as tarefas do array
    tarefas.forEach(tarefa => {
        // Cria um elemento <li> para representar a tarefa
        const li = document.createElement('li');

        // Define a cor da borda esquerda do <li> com base na cor escolhida da tarefa
        li.style.borderLeftColor = tarefa.cor;

        // Se a tarefa estiver marcada como conclu√≠da, adiciona uma classe CSS para alterar o estilo (ex: riscado)
        if (tarefa.concluida) li.classList.add('completed');

        // Define o conte√∫do interno do <li>, com t√≠tulo, data de entrega e bot√µes de a√ß√£o
        li.innerHTML = `
      <div>
        <strong>${tarefa.titulo}</strong><br/>
        <small>Entrega: ${tarefa.dataEntrega}</small>
      </div>
      <div class="task-actions">
        <button onclick="marcar(${tarefa.id})">‚úî</button>  <!-- Bot√£o para marcar/desmarcar como conclu√≠da -->
        <button onclick="excluir(${tarefa.id})">üóë</button>  <!-- Bot√£o para excluir a tarefa -->
      </div>
    `;

        // Adiciona o <li> criado dentro da lista no DOM
        lista.appendChild(li);
    });
}

// Fun√ß√£o que marca ou desmarca uma tarefa como conclu√≠da
function marcar(id) {
    // Encontra a tarefa no array que possui o ID passado como par√¢metro
    const tarefa = tarefas.find(t => t.id === id);
    if (tarefa) {
        // Alterna o status 'concluida' (se estava true vira false, se estava false vira true)
        tarefa.concluida = !tarefa.concluida;
        // Atualiza a lista na tela
        renderizar();
    }
}

// Fun√ß√£o que exclui uma tarefa do array e atualiza a lista na tela
function excluir(id) {
    // Filtra o array removendo a tarefa cujo id √© igual ao passado, retornando um novo array sem ela
    tarefas = tarefas.filter(t => t.id !== id);
    // Atualiza a lista na tela
    renderizar();
}

// Evento de clique no bot√£o de exportar tarefas
exportBtn.addEventListener('click', () => {
    // Cria um Blob (arquivo em mem√≥ria) com os dados das tarefas convertidos para JSON formatado
    const blob = new Blob([JSON.stringify(tarefas, null, 2)], { type: 'application/json' });

    // Gera uma URL tempor√°ria para o Blob, para ser usada no link para download
    const url = URL.createObjectURL(blob);

    // Cria dinamicamente um elemento <a> para disparar o download
    const a = document.createElement('a');
    a.href = url;                 // Link para o arquivo Blob
    a.download = 'tarefas.json';  // Nome do arquivo que ser√° salvo
    a.click();                   // Simula o clique para iniciar o download

    // Libera a URL criada para o Blob para evitar vazamento de mem√≥ria
    URL.revokeObjectURL(url);
});

// Evento de clique no bot√£o de importar tarefas
importBtn.addEventListener('click', () => {
    // Abre o seletor de arquivos oculto para o usu√°rio escolher um arquivo JSON
    importFile.click();
});

// Evento disparado quando um arquivo √© selecionado no input file
importFile.addEventListener('change', e => {
    // Pega o arquivo selecionado (primeiro arquivo da lista)
    const file = e.target.files[0];
    if (!file) return; // Se n√£o tiver arquivo, sai da fun√ß√£o

    // Cria um FileReader para ler o conte√∫do do arquivo selecionado
    const reader = new FileReader();

    // Quando o arquivo terminar de ser lido com sucesso, executa essa fun√ß√£o
    reader.onload = event => {
        try {
            // Tenta fazer o parse do conte√∫do do arquivo para um objeto JS
            const dados = JSON.parse(event.target.result);

            // Verifica se o conte√∫do √© um array (esperado)
            if (Array.isArray(dados)) {
                // Atualiza o array tarefas com os dados importados
                tarefas = dados;
                // Atualiza a lista na tela
                renderizar();
            } else {
                // Se o arquivo n√£o for um array, avisa o usu√°rio que o formato √© inv√°lido
                alert("Formato de arquivo inv√°lido.");
            }
        } catch {
            // Se der erro ao fazer parse (ex: JSON inv√°lido), avisa o usu√°rio
            alert("Erro ao importar. Verifique o arquivo.");
        }
    };

    // Inicia a leitura do arquivo como texto
    reader.readAsText(file);
});
